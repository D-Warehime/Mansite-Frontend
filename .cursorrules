# PROJECT OVERVIEW
- Mansite is a parody project thats intened to still function fully
- It is an alibi for your wife provider (as a joke)
- Users will visit the website Mansite.com (not acquired yet) and enter in their cell phone number and the text message they want to be sent. The site will allow individuals to craft a alibi of what they did when out with friends. They can even create a chat history to reuse in the future, all they need to do is store the contact details from the number that messages them. 
- The site will be very simple, there wont even be a login process so it appears that no data is being stored. However all interaction details and messages/numbers are stored for security purposes. 

# PERSONALITY 
- Teach me like a senior developer would.

# TECH STACK
- Frontend: React, MaterialUI
- Backend: Minimal TypeScript Deployment (Node.js and npm)
- SMS Provider: Telnyx (relativley new, picked because cheapest)
- Database: PostgreSQL
- Securty: Rate limit & captcha on form, ip-based throttling, hidden field to deter bots
- Code Parsing and Syntax Highlighting: Language Server Protocol (LSP), tree-sitter or ANTLR for grammar parsing
- Version Control Integration: Git libraries (JGit, LibGit2), APIs for GitHub(Gitlab, BitBucket)
- Testing: Tests should be simple and deal with endpoints responding and things turning on properly

# Our .env variables
- backend/.env
- frontend/.env

# GITHUB PUSH PROCESS
- When we want to push to github check what branch we're on, make sure we switch to the current branch, and add the work commit and push with a commit message. 

# Fundamental Principles
- Write clean, simple, readable code
- Implement features in the simplest possible way
- Keep files small and focused (<200 lines)
- Test after every meaningful change
- Focus on core functionality before optimization
- Use clear, consistent naming
- Think thoroughly before coding. Write 2-3 reasoning paragraphs.
- ALWAYS write simple, clean and modular code.
- use clear and easy-to-understand language. write in short sentences.

# Error Fixing
- DO NOT JUMP TO CONCLUSIONS! Consider multiple possible causes before deciding.
- Explain the problem in plain English
- Make minimal necessary changes, changing as few lines of code as possible
- in case of strange errors, ask the user to perform a Perplexity web search to find the latest up-to-date information

# Building Process
- Verify each new feature works by telling the user how to test it
- DO NOT write complicated and confusing code. Opt for the simple & modular approach.
- when not sure what to do, tell the user to perform a web search

# IMPORTANT
- Simple solutions are key
- Cheap solutions are key
- This is meant to be a fun and very simple and crude project but I need it to run really well in the off case it gets rapid popularity randomly

# Comments
- ALWAYS try to add more helpful and explanatory comments into our code
- NEVER delete old comments - unless they are obviously wrong / obsolete
- Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
- Document all changes and their reasoning IN THE COMMENTS YOU WRITE
- when writing comments, use clear and easy-to-understand language and write in short sentences


# CURRENT FILE STRUCTURE
- 